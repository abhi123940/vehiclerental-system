import java.util.*;
import java.util.stream.Collectors;

abstract class Vehicle {
    protected String vehicleId;
    protected String brand;
    protected boolean isRented;

    public Vehicle(String vehicleId, String brand) {
        this.vehicleId = vehicleId;
        this.brand = brand;
        this.isRented = false;
    }

    public String getVehicleId() {
        return vehicleId;
    }

    public boolean isRented() {
        return isRented;
    }

    public void rent() {
        if (!isRented) {
            isRented = true;
            System.out.println(brand + " " + vehicleId + " rented successfully.");
        } else {
            System.out.println(brand + " " + vehicleId + " is already rented.");
        }
    }

    public void returnVehicle() {
        if (isRented) {
            isRented = false;
            System.out.println(brand + " " + vehicleId + " returned successfully.");
        } else {
            System.out.println(brand + " " + vehicleId + " was not rented.");
        }
    }

    public abstract void displayInfo();
}

class Car extends Vehicle {
    private int numDoors;

    public Car(String vehicleId, String brand, int numDoors) {
        super(vehicleId, brand);
        this.numDoors = numDoors;
    }

    @Override
    public void displayInfo() {
        System.out.printf("Car: %s, ID: %s, Doors: %d, Rented: %b%n", brand, vehicleId, numDoors, isRented);
    }
}

class Bike extends Vehicle {
    private boolean hasCarrier;

    public Bike(String vehicleId, String brand, boolean hasCarrier) {
        super(vehicleId, brand);
        this.hasCarrier = hasCarrier;
    }

    @Override
    public void displayInfo() {
        System.out.printf("Bike: %s, ID: %s, Carrier: %b, Rented: %b%n", brand, vehicleId, hasCarrier, isRented);
    }
}

   class VehicleRentalSystem{
    private static List<Vehicle> vehicleList = new ArrayList<>();

    public static void main(String[] args) {
        // Add sample vehicles
        vehicleList.add(new Car("C101", "Toyota", 4));
        vehicleList.add(new Car("C102", "Honda", 2));
        vehicleList.add(new Bike("B201", "Yamaha", true));
        vehicleList.add(new Bike("B202", "Bajaj", false));

        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            displayMenu();
            choice = getUserChoice(scanner);

            switch (choice) {
                case 1:
                    displayAllVehicles();
                    break;

                case 2:
                    rentVehicle(scanner);
                    break;

                case 3:
                    returnVehicle(scanner);
                    break;

                case 4:
                    System.out.println("Exiting system...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);

        scanner.close();
    }

    private static void displayMenu() {
        System.out.println("\n--- Vehicle Rental System ---");
        System.out.println("1. Display all vehicles");
        System.out.println("2. Rent a vehicle");
        System.out.println("3. Return a vehicle");
        System.out.println("4. Exit");
        System.out.print("Enter choice: ");
    }

    private static int getUserChoice(Scanner scanner) {
        while (!scanner.hasNextInt()) {
            System.out.println("Invalid input. Please enter a number.");
            scanner.next(); // clear invalid input
        }
        return scanner.nextInt();
    }

    private static void displayAllVehicles() {
        for (Vehicle v : vehicleList) {
            v.displayInfo();
        }
    }

    private static void rentVehicle(Scanner scanner) {
        System.out.print("Enter Vehicle ID to rent: ");
        String rentId = scanner.next();
        Vehicle rentVehicle = findVehicle(rentId);
        if (rentVehicle != null) {
            rentVehicle.rent();
        } else {
            System.out.println("Vehicle not found.");
        }
    }

    private static void returnVehicle(Scanner scanner) {
        System.out.print("Enter Vehicle ID to return: ");
        String returnId = scanner.next();
        Vehicle returnVehicle = findVehicle(returnId);
        if (returnVehicle != null) {
            returnVehicle.returnVehicle();
        } else {
            System.out.println("Vehicle not found.");
        }
    }

    private static Vehicle findVehicle(String id) {
        return vehicleList.stream()
                .filter(v -> v.getVehicleId().equalsIgnoreCase(id))
                .findFirst()
                .orElse(null);
    }
}